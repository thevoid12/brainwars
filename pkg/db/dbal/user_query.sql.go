// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_query.sql

package dbal

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getUserDetailsByID = `-- name: GetUserDetailsByID :many
SELECT id, username, refresh_token, user_type, bot_type, user_meta, premium, is_active, is_deleted, created_on, updated_on, created_by, updated_by FROM users
WHERE id = $1 AND is_deleted = false
`

func (q *Queries) GetUserDetailsByID(ctx context.Context, id pgtype.UUID) ([]User, error) {
	rows, err := q.db.Query(ctx, getUserDetailsByID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.RefreshToken,
			&i.UserType,
			&i.BotType,
			&i.UserMeta,
			&i.Premium,
			&i.IsActive,
			&i.IsDeleted,
			&i.CreatedOn,
			&i.UpdatedOn,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
