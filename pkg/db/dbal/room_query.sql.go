// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: room_query.sql

package dbal

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRoom = `-- name: CreateRoom :one
INSERT INTO room (
    id, 
    room_code, 
    room_owner, 
    room_members, 
    room_chat, 
    room_meta, 
    room_lock, 
    is_active, 
    is_deleted, 
    created_on, 
    updated_on, 
    created_by, 
    updated_by
) 
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, NOW(), NOW(), $10, $11)
RETURNING id, room_code, room_owner, room_members, room_chat, room_meta, room_lock, is_active, is_deleted, created_on, updated_on, created_by, updated_by
`

type CreateRoomParams struct {
	ID          pgtype.UUID
	RoomCode    string
	RoomOwner   pgtype.UUID
	RoomMembers []byte
	RoomChat    []byte
	RoomMeta    []byte
	RoomLock    bool
	IsActive    bool
	IsDeleted   bool
	CreatedBy   string
	UpdatedBy   string
}

func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) (Room, error) {
	row := q.db.QueryRow(ctx, createRoom,
		arg.ID,
		arg.RoomCode,
		arg.RoomOwner,
		arg.RoomMembers,
		arg.RoomChat,
		arg.RoomMeta,
		arg.RoomLock,
		arg.IsActive,
		arg.IsDeleted,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.RoomCode,
		&i.RoomOwner,
		&i.RoomMembers,
		&i.RoomChat,
		&i.RoomMeta,
		&i.RoomLock,
		&i.IsActive,
		&i.IsDeleted,
		&i.CreatedOn,
		&i.UpdatedOn,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}
