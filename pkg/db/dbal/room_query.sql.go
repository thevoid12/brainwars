// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: room_query.sql

package dbal

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const creatLeaderBoard = `-- name: CreatLeaderBoard :one
INSERT INTO leaderboard (
  id, 
  room_id,
  user_id, 
  score, 
  created_on, 
  updated_on, 
  created_by, 
  updated_by    
) 
VALUES ($1, $2, $3, $4, NOW(), NOW(), $5, $6)
RETURNING id, room_id, user_id, score, created_on, updated_on, created_by, updated_by
`

type CreatLeaderBoardParams struct {
	ID        pgtype.UUID
	RoomID    pgtype.UUID
	UserID    pgtype.UUID
	Score     float64
	CreatedBy string
	UpdatedBy string
}

// ------------------------------------- leaderboard ------------------------------------------------------------------------
func (q *Queries) CreatLeaderBoard(ctx context.Context, arg CreatLeaderBoardParams) (Leaderboard, error) {
	row := q.db.QueryRow(ctx, creatLeaderBoard,
		arg.ID,
		arg.RoomID,
		arg.UserID,
		arg.Score,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	var i Leaderboard
	err := row.Scan(
		&i.ID,
		&i.RoomID,
		&i.UserID,
		&i.Score,
		&i.CreatedOn,
		&i.UpdatedOn,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const createRoom = `-- name: CreateRoom :one
INSERT INTO room (
  id, 
  room_code,
  room_name, 
  room_owner, 
  room_chat, 
  room_meta, 
  room_lock, 
  is_active, 
  is_deleted, 
  created_on, 
  updated_on, 
  created_by, 
  updated_by,
  game_type,
  room_status
) 
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, NOW(), NOW(), $10, $11, $12,$13)
RETURNING id, room_code, room_name, room_owner, room_chat, room_meta, room_lock, game_type, room_status, is_active, is_deleted, created_on, updated_on, created_by, updated_by
`

type CreateRoomParams struct {
	ID         pgtype.UUID
	RoomCode   string
	RoomName   pgtype.Text
	RoomOwner  pgtype.UUID
	RoomChat   []byte
	RoomMeta   []byte
	RoomLock   bool
	IsActive   bool
	IsDeleted  bool
	CreatedBy  string
	UpdatedBy  string
	GameType   string
	RoomStatus string
}

// --------------------------------- room table ---------------------------------------------------------------------
func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) (Room, error) {
	row := q.db.QueryRow(ctx, createRoom,
		arg.ID,
		arg.RoomCode,
		arg.RoomName,
		arg.RoomOwner,
		arg.RoomChat,
		arg.RoomMeta,
		arg.RoomLock,
		arg.IsActive,
		arg.IsDeleted,
		arg.CreatedBy,
		arg.UpdatedBy,
		arg.GameType,
		arg.RoomStatus,
	)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.RoomCode,
		&i.RoomName,
		&i.RoomOwner,
		&i.RoomChat,
		&i.RoomMeta,
		&i.RoomLock,
		&i.GameType,
		&i.RoomStatus,
		&i.IsActive,
		&i.IsDeleted,
		&i.CreatedOn,
		&i.UpdatedOn,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const createRoomMember = `-- name: CreateRoomMember :one

INSERT INTO room_member (
  id, 
  room_id,
  user_id, 
  is_bot, 
  joined_on, 
  room_member_status, 
  is_active, 
  is_deleted, 
  created_on, 
  updated_on, 
  created_by, 
  updated_by    
)   
VALUES ($1, $2, $3, $4, NOW(), $5, $6, $7, NOW(), NOW(), $8, $9)
RETURNING id, room_id, user_id, is_bot, joined_on, room_member_status, is_active, is_deleted, created_on, updated_on, created_by, updated_by
`

type CreateRoomMemberParams struct {
	ID               pgtype.UUID
	RoomID           pgtype.UUID
	UserID           pgtype.UUID
	IsBot            bool
	RoomMemberStatus string
	IsActive         bool
	IsDeleted        bool
	CreatedBy        string
	UpdatedBy        string
}

// ------------------------------------ Room Member ------------------------------------------------------------------------
func (q *Queries) CreateRoomMember(ctx context.Context, arg CreateRoomMemberParams) (RoomMember, error) {
	row := q.db.QueryRow(ctx, createRoomMember,
		arg.ID,
		arg.RoomID,
		arg.UserID,
		arg.IsBot,
		arg.RoomMemberStatus,
		arg.IsActive,
		arg.IsDeleted,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	var i RoomMember
	err := row.Scan(
		&i.ID,
		&i.RoomID,
		&i.UserID,
		&i.IsBot,
		&i.JoinedOn,
		&i.RoomMemberStatus,
		&i.IsActive,
		&i.IsDeleted,
		&i.CreatedOn,
		&i.UpdatedOn,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const getLeaderBoardByID = `-- name: GetLeaderBoardByID :many
SELECT id, room_id, user_id, score, created_on, updated_on, created_by, updated_by FROM leaderboard
WHERE id = $1 AND is_deleted = false
`

func (q *Queries) GetLeaderBoardByID(ctx context.Context, id pgtype.UUID) ([]Leaderboard, error) {
	rows, err := q.db.Query(ctx, getLeaderBoardByID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Leaderboard
	for rows.Next() {
		var i Leaderboard
		if err := rows.Scan(
			&i.ID,
			&i.RoomID,
			&i.UserID,
			&i.Score,
			&i.CreatedOn,
			&i.UpdatedOn,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoomByID = `-- name: GetRoomByID :many
SELECT id, room_code, room_name, room_owner, room_chat, room_meta, room_lock, game_type, room_status, is_active, is_deleted, created_on, updated_on, created_by, updated_by FROM room
WHERE id = $1 AND is_deleted = false
`

func (q *Queries) GetRoomByID(ctx context.Context, id pgtype.UUID) ([]Room, error) {
	rows, err := q.db.Query(ctx, getRoomByID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.ID,
			&i.RoomCode,
			&i.RoomName,
			&i.RoomOwner,
			&i.RoomChat,
			&i.RoomMeta,
			&i.RoomLock,
			&i.GameType,
			&i.RoomStatus,
			&i.IsActive,
			&i.IsDeleted,
			&i.CreatedOn,
			&i.UpdatedOn,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoomByRoomCode = `-- name: GetRoomByRoomCode :many
SELECT id, room_code, room_name, room_owner, room_chat, room_meta, room_lock, game_type, room_status, is_active, is_deleted, created_on, updated_on, created_by, updated_by FROM room
WHERE room_code = $1 AND is_deleted = false
`

func (q *Queries) GetRoomByRoomCode(ctx context.Context, roomCode string) ([]Room, error) {
	rows, err := q.db.Query(ctx, getRoomByRoomCode, roomCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.ID,
			&i.RoomCode,
			&i.RoomName,
			&i.RoomOwner,
			&i.RoomChat,
			&i.RoomMeta,
			&i.RoomLock,
			&i.GameType,
			&i.RoomStatus,
			&i.IsActive,
			&i.IsDeleted,
			&i.CreatedOn,
			&i.UpdatedOn,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoomMemberByRoomAndUserID = `-- name: GetRoomMemberByRoomAndUserID :many
SELECT id, room_id, user_id, is_bot, joined_on, room_member_status, is_active, is_deleted, created_on, updated_on, created_by, updated_by FROM room_member
WHERE room_id = $1 AND user_id = $2 AND is_deleted = false
`

type GetRoomMemberByRoomAndUserIDParams struct {
	RoomID pgtype.UUID
	UserID pgtype.UUID
}

func (q *Queries) GetRoomMemberByRoomAndUserID(ctx context.Context, arg GetRoomMemberByRoomAndUserIDParams) ([]RoomMember, error) {
	rows, err := q.db.Query(ctx, getRoomMemberByRoomAndUserID, arg.RoomID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RoomMember
	for rows.Next() {
		var i RoomMember
		if err := rows.Scan(
			&i.ID,
			&i.RoomID,
			&i.UserID,
			&i.IsBot,
			&i.JoinedOn,
			&i.RoomMemberStatus,
			&i.IsActive,
			&i.IsDeleted,
			&i.CreatedOn,
			&i.UpdatedOn,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLeaderBoardByRoomID = `-- name: ListLeaderBoardByRoomID :many
SELECT id, room_id, user_id, score, created_on, updated_on, created_by, updated_by FROM leaderboard
WHERE room_id = $1 AND is_deleted = false 
ORDER BY score DESC
`

func (q *Queries) ListLeaderBoardByRoomID(ctx context.Context, roomID pgtype.UUID) ([]Leaderboard, error) {
	rows, err := q.db.Query(ctx, listLeaderBoardByRoomID, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Leaderboard
	for rows.Next() {
		var i Leaderboard
		if err := rows.Scan(
			&i.ID,
			&i.RoomID,
			&i.UserID,
			&i.Score,
			&i.CreatedOn,
			&i.UpdatedOn,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRoomByUserID = `-- name: ListRoomByUserID :many
SELECT id, room_code, room_name, room_owner, room_chat, room_meta, room_lock, game_type, room_status, is_active, is_deleted, created_on, updated_on, created_by, updated_by FROM room
WHERE room_owner = $1 AND is_deleted = false
`

func (q *Queries) ListRoomByUserID(ctx context.Context, roomOwner pgtype.UUID) ([]Room, error) {
	rows, err := q.db.Query(ctx, listRoomByUserID, roomOwner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.ID,
			&i.RoomCode,
			&i.RoomName,
			&i.RoomOwner,
			&i.RoomChat,
			&i.RoomMeta,
			&i.RoomLock,
			&i.GameType,
			&i.RoomStatus,
			&i.IsActive,
			&i.IsDeleted,
			&i.CreatedOn,
			&i.UpdatedOn,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRoomMembersByRoomID = `-- name: ListRoomMembersByRoomID :many
SELECT id, room_id, user_id, is_bot, joined_on, room_member_status, is_active, is_deleted, created_on, updated_on, created_by, updated_by FROM room_member
WHERE room_id = $1 AND is_deleted = false
`

func (q *Queries) ListRoomMembersByRoomID(ctx context.Context, roomID pgtype.UUID) ([]RoomMember, error) {
	rows, err := q.db.Query(ctx, listRoomMembersByRoomID, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RoomMember
	for rows.Next() {
		var i RoomMember
		if err := rows.Scan(
			&i.ID,
			&i.RoomID,
			&i.UserID,
			&i.IsBot,
			&i.JoinedOn,
			&i.RoomMemberStatus,
			&i.IsActive,
			&i.IsDeleted,
			&i.CreatedOn,
			&i.UpdatedOn,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLeaderBoardScoreByID = `-- name: UpdateLeaderBoardScoreByID :exec
UPDATE leaderboard
SET 
  score = $2,
  updated_on = NOW(),
  updated_by = $3
WHERE id = $1 AND is_deleted = false
`

type UpdateLeaderBoardScoreByIDParams struct {
	ID        pgtype.UUID
	Score     float64
	UpdatedBy string
}

func (q *Queries) UpdateLeaderBoardScoreByID(ctx context.Context, arg UpdateLeaderBoardScoreByIDParams) error {
	_, err := q.db.Exec(ctx, updateLeaderBoardScoreByID, arg.ID, arg.Score, arg.UpdatedBy)
	return err
}

const updateLeaderBoardScoreByUserIDAndRoomID = `-- name: UpdateLeaderBoardScoreByUserIDAndRoomID :exec
UPDATE leaderboard
SET 
  score = $3,
  updated_on = NOW(),
  updated_by = $4
WHERE room_id = $1 AND user_id = $2 AND is_deleted = false
`

type UpdateLeaderBoardScoreByUserIDAndRoomIDParams struct {
	RoomID    pgtype.UUID
	UserID    pgtype.UUID
	Score     float64
	UpdatedBy string
}

func (q *Queries) UpdateLeaderBoardScoreByUserIDAndRoomID(ctx context.Context, arg UpdateLeaderBoardScoreByUserIDAndRoomIDParams) error {
	_, err := q.db.Exec(ctx, updateLeaderBoardScoreByUserIDAndRoomID,
		arg.RoomID,
		arg.UserID,
		arg.Score,
		arg.UpdatedBy,
	)
	return err
}

const updateRoomByID = `-- name: UpdateRoomByID :exec
UPDATE room
SET 
  room_name = $2,
  room_chat = $3,
  room_meta = $4,
  room_lock = $5,
  is_active = $6,
  updated_on = NOW(),
  updated_by = $7,
  game_type = $8,
  room_status = $9
WHERE id = $1
`

type UpdateRoomByIDParams struct {
	ID         pgtype.UUID
	RoomName   pgtype.Text
	RoomChat   []byte
	RoomMeta   []byte
	RoomLock   bool
	IsActive   bool
	UpdatedBy  string
	GameType   string
	RoomStatus string
}

func (q *Queries) UpdateRoomByID(ctx context.Context, arg UpdateRoomByIDParams) error {
	_, err := q.db.Exec(ctx, updateRoomByID,
		arg.ID,
		arg.RoomName,
		arg.RoomChat,
		arg.RoomMeta,
		arg.RoomLock,
		arg.IsActive,
		arg.UpdatedBy,
		arg.GameType,
		arg.RoomStatus,
	)
	return err
}

const updateRoomMemberByID = `-- name: UpdateRoomMemberByID :exec
UPDATE room_member
SET 
  room_member_status = $2,
  is_active = $3,
  updated_on = NOW(),
  updated_by = $4
WHERE id = $1
`

type UpdateRoomMemberByIDParams struct {
	ID               pgtype.UUID
	RoomMemberStatus string
	IsActive         bool
	UpdatedBy        string
}

func (q *Queries) UpdateRoomMemberByID(ctx context.Context, arg UpdateRoomMemberByIDParams) error {
	_, err := q.db.Exec(ctx, updateRoomMemberByID,
		arg.ID,
		arg.RoomMemberStatus,
		arg.IsActive,
		arg.UpdatedBy,
	)
	return err
}

const updateRoomMemberByRoomAndUserID = `-- name: UpdateRoomMemberByRoomAndUserID :exec
UPDATE room_member
SET 
  room_member_status = $2,
  is_active = $3,
  updated_on = NOW(),
  updated_by = $4
WHERE room_id = $1 AND user_id = $5 AND is_deleted=false
`

type UpdateRoomMemberByRoomAndUserIDParams struct {
	RoomID           pgtype.UUID
	RoomMemberStatus string
	IsActive         bool
	UpdatedBy        string
	UserID           pgtype.UUID
}

func (q *Queries) UpdateRoomMemberByRoomAndUserID(ctx context.Context, arg UpdateRoomMemberByRoomAndUserIDParams) error {
	_, err := q.db.Exec(ctx, updateRoomMemberByRoomAndUserID,
		arg.RoomID,
		arg.RoomMemberStatus,
		arg.IsActive,
		arg.UpdatedBy,
		arg.UserID,
	)
	return err
}
